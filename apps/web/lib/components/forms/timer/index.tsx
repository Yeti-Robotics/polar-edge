"use client";
import { Button } from "@repo/ui/components/button";
import { Input } from "@repo/ui/components/input";
import { PauseCircle, PlayIcon, TimerReset } from "lucide-react";
import { useEffect, useMemo, useState } from "react";

interface TimerProps {
	name: string;
}

/**
 * This code was partially generated by v0 by Vercel.
 *
 * @see https://v0.dev/t/nSX2hamgpeb
 */
export function Timer({ name }: TimerProps) {
	const [startTime, setStartTime] = useState<number | null>(null);
	const [intervalElapsedTime, setIntervalElapsedTime] = useState<number>(0);
	const [cumulativeTime, setCumulativeTime] = useState<number>(0);
	const [isRunning, setIsRunning] = useState<boolean>(false);

	const start = () => {
		setStartTime(Date.now());
		setIsRunning(true);
	};

	const stop = () => {
		setCumulativeTime((curr) => curr + Date.now() - (startTime ?? 0));
		setIntervalElapsedTime(0);
		setStartTime(null);
		setIsRunning(false);
	};

	const reset = () => {
		setStartTime(null);
		setIntervalElapsedTime(0);
		setCumulativeTime(0);
		setIsRunning(false);
	};

	useEffect(() => {
		if (isRunning && startTime !== null) {
			const interval = setInterval(() => {
				setIntervalElapsedTime(Date.now() - (startTime ?? 0));
			}, 250);
			return () => clearInterval(interval);
		}
	}, [isRunning, startTime]);

	const totalTime = useMemo(
		() => cumulativeTime + intervalElapsedTime,
		[cumulativeTime, intervalElapsedTime]
	);

	return (
		<div className="flex items-center justify-center space-x-2">
			{isRunning ? (
				<Button
					aria-label="Pause timer"
					onClick={stop}
					size="icon"
					variant="ghost"
					type="button"
					title="pause"
				>
					<PauseCircle className="size-6" />
				</Button>
			) : (
				<Button
					aria-label="Start timer"
					onClick={start}
					size="icon"
					variant="ghost"
					type="button"
					title="start"
				>
					<PlayIcon className="size-6" />
				</Button>
			)}
			<Input
				readOnly
				type="hidden"
				name={name}
				value={totalTime / 1000}
			/>
			<div role="timer" className="w-32 text-center text-4xl font-bold">
				{`${String(Math.floor(totalTime / 60000)).padStart(2, "0")}:${String(
					Math.floor(totalTime / 1000) % 60
				).padStart(2, "0")}`}
			</div>
			<Button
				type="button"
				aria-label="Reset timer"
				size="icon"
				variant="ghost"
				title="reset"
			>
				<TimerReset onClick={reset} className="size-6" />
			</Button>
		</div>
	);
}
